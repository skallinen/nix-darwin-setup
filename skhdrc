#  NOTE(koekeishiya): A list of all built-in modifier and literal keywords can
#                     be found at https://github.com/koekeishiya/skhd/issues/1
#
#                     A hotkey is written according to the following rules:
#
#                       hotkey       = <mode> '<' <action> | <action>
#
#                       mode         = 'name of mode' | <mode> ',' <mode>
#
#                       action       = <keysym> '[' <proc_map_lst> ']' | <keysym> '->' '[' <proc_map_lst> ']'
#                                      <keysym> ':' <command>          | <keysym> '->' ':' <command>
#                                      <keysym> ';' <mode>             | <keysym> '->' ';' <mode>
#
#                       keysym       = <mod> '-' <key> | <key>
#
#                       mod          = 'modifier keyword' | <mod> '+' <mod>
#
#                       key          = <literal> | <keycode>
#
#                       literal      = 'single letter or built-in keyword'
#
#                       keycode      = 'apple keyboard kVK_<Key> values (0x3C)'
#
#                       proc_map_lst = * <proc_map>
#
#                       proc_map     = <string> ':' <command> | <string>     '~' |
#                                      '*'      ':' <command> | '*'          '~'
#
#                       string       = '"' 'sequence of characters' '"'
#
#                       command      = command is executed through '$SHELL -c' and
#                                      follows valid shell syntax. if the $SHELL environment
#                                      variable is not set, it will default to '/bin/bash'.
#                                      when bash is used, the ';' delimeter can be specified
#                                      to chain commands.
#
#                                      to allow a command to extend into multiple lines,
#                                      prepend '\' at the end of the previous line.
#
#                                      an EOL character signifies the end of the bind.
#
#                       ->           = keypress is not consumed by skhd
#
#                       *            = matches every application not specified in <proc_map_lst>
#
#                       ~            = application is unbound and keypress is forwarded per usual, when specified in a <proc_map>
#
#  NOTE(koekeishiya): A mode is declared according to the following rules:
#
#                       mode_decl = '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
#                                   '::' <name> '@'               | '::' <name>
#
#                       name      = desired name for this mode,
#
#                       @         = capture keypresses regardless of being bound to an action
#
#                       command   = command is executed through '$SHELL -c' and
#                                   follows valid shell syntax. if the $SHELL environment
#                                   variable is not set, it will default to '/bin/bash'.
#                                   when bash is used, the ';' delimeter can be specified
#                                   to chain commands.
#
#                                   to allow a command to extend into multiple lines,
#                                   prepend '\' at the end of the previous line.
#
#                                   an EOL character signifies the end of the bind.

# add an on_enter command to the default mode
# :: default : yabai -m config active_window_border_color 0xff775759
#
# defines a new mode 'test' with an on_enter command, that captures keypresses
# :: test @ : yabai -m config active_window_border_color 0xff24ccaa
#
# from 'default' mode, activate mode 'test'
# cmd - x ; test
#
# from 'test' mode, activate mode 'default'
# test < cmd - x ; default
#
# launch a new terminal instance when in either 'default' or 'test' mode
# default, test < cmd - return : open -na /Applications/Terminal.app

# application specific bindings
#
# cmd - n [
#     "kitty"       : echo "hello kitty"
#     *             : echo "hello everyone"
#     "qutebrowser" : echo "hello qutebrowser"
#     "terminal"    ~
#     "finder"      : false
# ]

# specify a file that should be included as an additional config-file.
# treated as an absolutepath if the filename begins with '/' otherwise
# the file is relative to the path of the config-file it was loaded from.
#
# .load "/Users/Koe/.config/partial_skhdrc"
# .load "partial_skhdrc"

# prevent skhd from monitoring events for specific applications.
#
# .blacklist [
#    "kitty"
#    "terminal"
#    "qutebrowser"
# ]

# open terminal, blazingly fast compared to iTerm/Hyper
# cmd + shift - return : /Applications/Terminal.app/Contents/MacOS/Terminal

# open qutebrowser
# cmd + shift - return : ~/Scripts/qtb.sh

# open mpv
# cmd - m : open -na /Applications/mpv.app $(pbpaste)

# vim:ft=conf

# ----> ctrl + shift + alt + cmd - h : yabai -m window --focus west
# ----> ctrl + shift + alt + cmd - j : yabai -m window --focus south
# ----> ctrl + shift + alt + cmd - k : yabai -m window --focus north
# ----> ctrl + shift + alt + cmd - l : yabai -m window --focus east
# ----> 
# ----> cmd - left : yabai -m window --focus west
# ----> cmd - down : yabai -m window --focus south
# ----> cmd - up : yabai -m window --focus north
# ----> cmd - right : yabai -m window --focus east 
# ----> 
# ----> # swap managed windows
# ----> shift + alt - h : yabai -m window --swap west
# ----> shift + alt - j : yabai -m window --swap south
# ----> shift + alt - k : yabai -m window --swap north
# ----> shift + alt - l : yabai -m window --swap east
# ----> 
# ----> # move managed windows
# ----> shift + alt + ctrl -h : yabai -m window --warp west
# ----> shift + alt + ctrl -j : yabai -m window --warp south
# ----> shift + alt + ctrl -k : yabai -m window --warp north
# ----> shift + alt + ctrl -l : yabai -m window --warp east
# ----> 
# ----> alt - r : yabai -m window --rotate 90
# ----> 
# ----> shift + cmd - f : yabai -m window --toggle zoom-fullscreen
# ----> 
# ----> alt - g : yabai -m space --toggle padding; yabai -m space --toggle gap
# ----> 
# ----> alt - t : yabai -m window --toggle float;\
# ---->           yabai -m window --grid 4:4:1:1:2:2
# ----> 
# ----> alt - e : yabai -m window --toggle split
# ----> 
# ----> shift + alt - 0 : yabai -m space --balance
# ----> 
# ----> alt - s : yabai -m window --toggle sticky;\
# ---->           yabai -m window --toggle topmost;\
# ---->           yabai -m window --toggle pip
# ----> 
# ----> # ###########################################################################
# ----> # NOTE: the following isn't supported without SIP being (partially) disabled
# ----> # I'm still very wary of doing that, so I may not use this feature
# ----> # ###########################################################################
# ----> 
# ----> cmd + shift - 1 : yabai -m window --space 1; yabai -m space --focus 1
# ----> cmd + shift - 2 : yabai -m window --space 2; yabai -m space --focus 2
# ----> cmd + shift - 3 : yabai -m window --space 3; yabai -m space --focus 3
# ----> cmd + shift - 4 : yabai -m window --space 4; yabai -m space --focus 4
# ----> cmd + shift - 5 : yabai -m window --space 5; yabai -m space --focus 5
# ----> cmd + shift - 6 : yabai -m window --space 6; yabai -m space --focus 6
# ----> cmd + shift - 7 : yabai -m window --space 7; yabai -m space --focus 7
# ----> cmd + shift - 8 : yabai -m window --space 8; yabai -m space --focus 8
# ----> cmd + shift - 9 : yabai -m window --space 9; yabai -m space --focus 9
# ----> 
# ----> 
# ----> # cmd - 1 : yabai -m space --focus 1
# ----> # cmd - 2 : yabai -m space --focus 2
# ----> # cmd - 3 : yabai -m space --focus 3
# ----> # cmd - 4 : yabai -m space --focus 4
# ----> # cmd - 5 : yabai -m space --focus 5
# ----> # cmd - 6 : yabai -m space --focus 6
# ----> # cmd - 7 : yabai -m space --focus 7
# ----> # cmd - 8 : yabai -m space --focus 8
# ----> # cmd - 9 : yabai -m space --focus 9
# ----> 
# ----> 
# ----> shift + alt - n : yabai -m space --create && \
# ---->                   index="$(yabai -m query --spaces --display | jq 'map(select(."native-fullscreen" == 0))[-1].index')" && \
# ---->                   yabai -m window --space "${index}" && \
# ---->                   yabai -m space --focus "${index}"
# ----> 
# ----> alt - tab : yabai -m space --focus recent
# ----> 
# ----> shift + alt - n : yabai -m window --display next; yabai -m display --focus next
# ----> shift + alt - p : yabai -m window --display previous; yabai -m display --focus previous